[COVERAGE]
; Coverage level of api, choose (uncomment) one option from next lines
api_coverage_level = COVERAGE_ENDPOINT
;api_coverage_level = COVERAGE_METHOD
;api_coverage_level = COVERAGE_RESPONSE

; Parameter coverage level, choose (uncomment) one option from next lines if necessary
parameter_coverage_level = COVERAGE_USED_ONCE
;parameter_coverage_level = COVERAGE_USED_TWICE_UNIQUELY

; Whether or not program should crash (produce exit code 1) in the end of execution if critical coverage or anomaly error is detected

[CRITICAL_ANOMALIES]
; Anomalies which will cause critical failure -> prorgram exiting with code 1
;critical_anomalies = UNDEFINED_RESPONSE_CODE_DEFAULT_NOT_SPECIFIED,MISSING_REQUIRED_REQUEST_PARAMETER,BROKEN_REQUEST_BODY,UNDEFINED_RESPONSE_CODE_DEFAULT_IS_SPECIFIED,BROKEN_RESPONSE_BODY,INVALID_RESPONSE_BODY,UNDEFINED_METHOD_OF_ENDPOINT
critical_anomalies = UNDEFINED_RESPONSE_CODE_DEFAULT_NOT_SPECIFIED,MISSING_REQUIRED_REQUEST_PARAMETER,BROKEN_REQUEST_BODY,UNDEFINED_RESPONSE_CODE_DEFAULT_IS_SPECIFIED,BROKEN_RESPONSE_BODY,INVALID_RESPONSE_BODY,UNDEFINED_METHOD_OF_ENDPOINT

[FILE_PATHS]
report_filename_coverage_failure_report = coverage_failure_report.txt
report_filename_anomaly_failure_report = anomaly_failure_report.txt
report_filename_anomaly_report = anomaly_report.txt
report_filename_large_report_txt = large_report_text.txt
report_filename_large_report_json = large_report_json.json

[EXCLUSIONS]
; Give list of endpoints which are excluded from analysis
;exclude_endpoints = /example/endpoint1,/example/{examplepathparameter}/endpoint2

[MISC]
; Whether or not program should crash (produce exit code 1) in the end of execution if critical coverage or anomaly error is detected
crash_in_critical_failure = true
;crash_in_critical_failure = false

; Whether or not to print anomalies to the console output
suppress_console_anomalies_output = true
;suppress_console_anomalies_output = true